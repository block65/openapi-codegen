/**
 * This file was auto generated by @block65/openapi-codegen
 *
 * WARN: Do not edit directly.
 *
 * Generated on 2024-10-02T11:43:05.462Z
 *
 */
/** eslint-disable max-classes */
import { Command } from '@block65/rest-client';
import type { Jsonifiable } from 'type-fest';
import type {
  CreateChatCompletionRequest,
  CreateChatCompletionCommandInput,
  CreateChatCompletionCommandBody,
  CreateChatCompletionResponse,
  CreateCompletionRequest,
  CreateCompletionCommandInput,
  CreateCompletionCommandBody,
  CreateCompletionResponse,
  CreateImageRequest,
  CreateImageCommandInput,
  CreateImageCommandBody,
  ImagesResponse,
  CreateImageEditCommandInput,
  CreateImageEditCommandBody,
  CreateImageVariationCommandInput,
  CreateImageVariationCommandBody,
  CreateEmbeddingRequest,
  CreateEmbeddingCommandInput,
  CreateEmbeddingCommandBody,
  CreateEmbeddingResponse,
  CreateSpeechRequest,
  CreateSpeechCommandInput,
  CreateSpeechCommandBody,
  CreateTranscriptionCommandInput,
  CreateTranscriptionCommandBody,
  CreateTranslationCommandInput,
  CreateTranslationCommandBody,
  ListFilesCommandQuery,
  ListFilesCommandInput,
  ListFilesCommandBody,
  ListFilesResponse,
  CreateFileCommandInput,
  CreateFileCommandBody,
  OpenAiFile,
  DeleteFileCommandInput,
  DeleteFileCommandBody,
  DeleteFileResponse,
  RetrieveFileCommandInput,
  RetrieveFileCommandBody,
  DownloadFileCommandInput,
  DownloadFileCommandBody,
  CreateUploadRequest,
  CreateUploadCommandInput,
  CreateUploadCommandBody,
  Upload,
  AddUploadPartCommandInput,
  AddUploadPartCommandBody,
  UploadPart,
  CompleteUploadRequest,
  CompleteUploadCommandInput,
  CompleteUploadCommandBody,
  CancelUploadCommandInput,
  CancelUploadCommandBody,
  CreateFineTuningJobRequest,
  CreateFineTuningJobCommandInput,
  CreateFineTuningJobCommandBody,
  FineTuningJob,
  ListPaginatedFineTuningJobsCommandQuery,
  ListPaginatedFineTuningJobsCommandInput,
  ListPaginatedFineTuningJobsCommandBody,
  ListPaginatedFineTuningJobsResponse,
  RetrieveFineTuningJobCommandInput,
  RetrieveFineTuningJobCommandBody,
  ListFineTuningEventsCommandQuery,
  ListFineTuningEventsCommandInput,
  ListFineTuningEventsCommandBody,
  ListFineTuningJobEventsResponse,
  CancelFineTuningJobCommandInput,
  CancelFineTuningJobCommandBody,
  ListFineTuningJobCheckpointsCommandQuery,
  ListFineTuningJobCheckpointsCommandInput,
  ListFineTuningJobCheckpointsCommandBody,
  ListFineTuningJobCheckpointsResponse,
  ListModelsCommandInput,
  ListModelsCommandBody,
  ListModelsResponse,
  RetrieveModelCommandInput,
  RetrieveModelCommandBody,
  Model,
  DeleteModelCommandInput,
  DeleteModelCommandBody,
  DeleteModelResponse,
  CreateModerationRequest,
  CreateModerationCommandInput,
  CreateModerationCommandBody,
  CreateModerationResponse,
  ListAssistantsCommandQuery,
  ListAssistantsCommandInput,
  ListAssistantsCommandBody,
  ListAssistantsResponse,
  CreateAssistantRequest,
  CreateAssistantCommandInput,
  CreateAssistantCommandBody,
  AssistantObject,
  GetAssistantCommandInput,
  GetAssistantCommandBody,
  ModifyAssistantRequest,
  ModifyAssistantCommandInput,
  ModifyAssistantCommandBody,
  DeleteAssistantCommandInput,
  DeleteAssistantCommandBody,
  DeleteAssistantResponse,
  CreateThreadRequest,
  CreateThreadCommandInput,
  CreateThreadCommandBody,
  ThreadObject,
  GetThreadCommandInput,
  GetThreadCommandBody,
  ModifyThreadRequest,
  ModifyThreadCommandInput,
  ModifyThreadCommandBody,
  DeleteThreadCommandInput,
  DeleteThreadCommandBody,
  DeleteThreadResponse,
  ListMessagesCommandQuery,
  ListMessagesCommandInput,
  ListMessagesCommandBody,
  ListMessagesResponse,
  CreateMessageRequest,
  CreateMessageCommandInput,
  CreateMessageCommandBody,
  MessageObject,
  GetMessageCommandInput,
  GetMessageCommandBody,
  ModifyMessageRequest,
  ModifyMessageCommandInput,
  ModifyMessageCommandBody,
  DeleteMessageCommandInput,
  DeleteMessageCommandBody,
  DeleteMessageResponse,
  CreateThreadAndRunRequest,
  CreateThreadAndRunCommandInput,
  CreateThreadAndRunCommandBody,
  RunObject,
  ListRunsCommandQuery,
  ListRunsCommandInput,
  ListRunsCommandBody,
  ListRunsResponse,
  CreateRunCommandQuery,
  CreateRunRequest,
  CreateRunCommandInput,
  CreateRunCommandBody,
  GetRunCommandInput,
  GetRunCommandBody,
  ModifyRunRequest,
  ModifyRunCommandInput,
  ModifyRunCommandBody,
  SubmitToolOutputsRunRequest,
  SubmitToolOuputsToRunCommandInput,
  SubmitToolOuputsToRunCommandBody,
  CancelRunCommandInput,
  CancelRunCommandBody,
  ListRunStepsCommandQuery,
  ListRunStepsCommandInput,
  ListRunStepsCommandBody,
  ListRunStepsResponse,
  GetRunStepCommandQuery,
  GetRunStepCommandInput,
  GetRunStepCommandBody,
  RunStepObject,
  ListVectorStoresCommandQuery,
  ListVectorStoresCommandInput,
  ListVectorStoresCommandBody,
  ListVectorStoresResponse,
  CreateVectorStoreRequest,
  CreateVectorStoreCommandInput,
  CreateVectorStoreCommandBody,
  VectorStoreObject,
  GetVectorStoreCommandInput,
  GetVectorStoreCommandBody,
  UpdateVectorStoreRequest,
  ModifyVectorStoreCommandInput,
  ModifyVectorStoreCommandBody,
  DeleteVectorStoreCommandInput,
  DeleteVectorStoreCommandBody,
  DeleteVectorStoreResponse,
  ListVectorStoreFilesCommandQuery,
  ListVectorStoreFilesCommandInput,
  ListVectorStoreFilesCommandBody,
  ListVectorStoreFilesResponse,
  CreateVectorStoreFileRequest,
  CreateVectorStoreFileCommandInput,
  CreateVectorStoreFileCommandBody,
  VectorStoreFileObject,
  GetVectorStoreFileCommandInput,
  GetVectorStoreFileCommandBody,
  DeleteVectorStoreFileCommandInput,
  DeleteVectorStoreFileCommandBody,
  DeleteVectorStoreFileResponse,
  CreateVectorStoreFileBatchRequest,
  CreateVectorStoreFileBatchCommandInput,
  CreateVectorStoreFileBatchCommandBody,
  VectorStoreFileBatchObject,
  GetVectorStoreFileBatchCommandInput,
  GetVectorStoreFileBatchCommandBody,
  CancelVectorStoreFileBatchCommandInput,
  CancelVectorStoreFileBatchCommandBody,
  ListFilesInVectorStoreBatchCommandQuery,
  ListFilesInVectorStoreBatchCommandInput,
  ListFilesInVectorStoreBatchCommandBody,
  CreateBatchCommandInput,
  CreateBatchCommandBody,
  Batch,
  ListBatchesCommandQuery,
  ListBatchesCommandInput,
  ListBatchesCommandBody,
  ListBatchesResponse,
  RetrieveBatchCommandInput,
  RetrieveBatchCommandBody,
  CancelBatchCommandInput,
  CancelBatchCommandBody,
  ListAuditLogsCommandQuery,
  ListAuditLogsCommandInput,
  ListAuditLogsCommandBody,
  ListAuditLogsResponse,
  ListInvitesCommandQuery,
  ListInvitesCommandInput,
  ListInvitesCommandBody,
  InviteListResponse,
  InviteRequest,
  InviteUserCommandInput,
  InviteUserCommandBody,
  Invite,
  RetrieveInviteCommandInput,
  RetrieveInviteCommandBody,
  DeleteInviteCommandInput,
  DeleteInviteCommandBody,
  InviteDeleteResponse,
  ListUsersCommandQuery,
  ListUsersCommandInput,
  ListUsersCommandBody,
  UserListResponse,
  RetrieveUserCommandInput,
  RetrieveUserCommandBody,
  User,
  UserRoleUpdateRequest,
  ModifyUserCommandInput,
  ModifyUserCommandBody,
  DeleteUserCommandInput,
  DeleteUserCommandBody,
  UserDeleteResponse,
  ListProjectsCommandQuery,
  ListProjectsCommandInput,
  ListProjectsCommandBody,
  ProjectListResponse,
  ProjectCreateRequest,
  CreateProjectCommandInput,
  CreateProjectCommandBody,
  Project,
  RetrieveProjectCommandInput,
  RetrieveProjectCommandBody,
  ProjectUpdateRequest,
  ModifyProjectCommandInput,
  ModifyProjectCommandBody,
  ArchiveProjectCommandInput,
  ArchiveProjectCommandBody,
  ListProjectUsersCommandQuery,
  ListProjectUsersCommandInput,
  ListProjectUsersCommandBody,
  ProjectUserListResponse,
  ProjectUserCreateRequest,
  CreateProjectUserCommandInput,
  CreateProjectUserCommandBody,
  ProjectUser,
  RetrieveProjectUserCommandInput,
  RetrieveProjectUserCommandBody,
  ProjectUserUpdateRequest,
  ModifyProjectUserCommandInput,
  ModifyProjectUserCommandBody,
  DeleteProjectUserCommandInput,
  DeleteProjectUserCommandBody,
  ProjectUserDeleteResponse,
  ListProjectServiceAccountsCommandQuery,
  ListProjectServiceAccountsCommandInput,
  ListProjectServiceAccountsCommandBody,
  ProjectServiceAccountListResponse,
  ProjectServiceAccountCreateRequest,
  CreateProjectServiceAccountCommandInput,
  CreateProjectServiceAccountCommandBody,
  ProjectServiceAccountCreateResponse,
  RetrieveProjectServiceAccountCommandInput,
  RetrieveProjectServiceAccountCommandBody,
  ProjectServiceAccount,
  DeleteProjectServiceAccountCommandInput,
  DeleteProjectServiceAccountCommandBody,
  ProjectServiceAccountDeleteResponse,
  ListProjectApiKeysCommandQuery,
  ListProjectApiKeysCommandInput,
  ListProjectApiKeysCommandBody,
  ProjectApiKeyListResponse,
  RetrieveProjectApiKeyCommandInput,
  RetrieveProjectApiKeyCommandBody,
  ProjectApiKey,
  DeleteProjectApiKeyCommandInput,
  DeleteProjectApiKeyCommandBody,
  ProjectApiKeyDeleteResponse,
} from './types.js';

/**
 * CreateChatCompletionCommand
 *
 * @summary Creates a model response for the given chat conversation.
 */
export class CreateChatCompletionCommand extends Command<
  CreateChatCompletionCommandInput,
  CreateChatCompletionResponse,
  CreateChatCompletionCommandBody
> {
  public override method = 'post' as const;

  constructor(input: CreateChatCompletionCommandInput) {
    const body = input;
    super(`/chat/completions`, body);
  }
}

/**
 * CreateCompletionCommand
 *
 * @summary Creates a completion for the provided prompt and parameters.
 */
export class CreateCompletionCommand extends Command<
  CreateCompletionCommandInput,
  CreateCompletionResponse,
  CreateCompletionCommandBody
> {
  public override method = 'post' as const;

  constructor(input: CreateCompletionCommandInput) {
    const body = input;
    super(`/completions`, body);
  }
}

/**
 * CreateImageCommand
 *
 * @summary Creates an image given a prompt.
 */
export class CreateImageCommand extends Command<
  CreateImageCommandInput,
  ImagesResponse,
  CreateImageCommandBody
> {
  public override method = 'post' as const;

  constructor(input: CreateImageCommandInput) {
    const body = input;
    super(`/images/generations`, body);
  }
}

/**
 * CreateImageEditCommand
 *
 * @summary Creates an edited or extended image given an original image and a prompt.
 */
export class CreateImageEditCommand extends Command<
  CreateImageEditCommandInput,
  ImagesResponse,
  CreateImageEditCommandBody
> {
  public override method = 'post' as const;

  constructor(input: CreateImageEditCommandInput) {
    const body = input;
    super(`/images/edits`);
  }
}

/**
 * CreateImageVariationCommand
 *
 * @summary Creates a variation of a given image.
 */
export class CreateImageVariationCommand extends Command<
  CreateImageVariationCommandInput,
  ImagesResponse,
  CreateImageVariationCommandBody
> {
  public override method = 'post' as const;

  constructor(input: CreateImageVariationCommandInput) {
    const body = input;
    super(`/images/variations`);
  }
}

/**
 * CreateEmbeddingCommand
 *
 * @summary Creates an embedding vector representing the input text.
 */
export class CreateEmbeddingCommand extends Command<
  CreateEmbeddingCommandInput,
  CreateEmbeddingResponse,
  CreateEmbeddingCommandBody
> {
  public override method = 'post' as const;

  constructor(input: CreateEmbeddingCommandInput) {
    const body = input;
    super(`/embeddings`, body);
  }
}

/**
 * CreateSpeechCommand
 *
 * @summary Generates audio from the input text.
 */
export class CreateSpeechCommand extends Command<
  CreateSpeechCommandInput,
  unknown,
  CreateSpeechCommandBody
> {
  public override method = 'post' as const;

  constructor(input: CreateSpeechCommandInput) {
    const body = input;
    super(`/audio/speech`, body);
  }
}

/**
 * CreateTranscriptionCommand
 *
 * @summary Transcribes audio into the input language.
 */
export class CreateTranscriptionCommand extends Command<
  CreateTranscriptionCommandInput,
  unknown,
  CreateTranscriptionCommandBody
> {
  public override method = 'post' as const;

  constructor(input: CreateTranscriptionCommandInput) {
    const body = input;
    super(`/audio/transcriptions`);
  }
}

/**
 * CreateTranslationCommand
 *
 * @summary Translates audio into English.
 */
export class CreateTranslationCommand extends Command<
  CreateTranslationCommandInput,
  unknown,
  CreateTranslationCommandBody
> {
  public override method = 'post' as const;

  constructor(input: CreateTranslationCommandInput) {
    const body = input;
    super(`/audio/translations`);
  }
}

/**
 * ListFilesCommand
 *
 * @summary Returns a list of files that belong to the user's organization.
 */
export class ListFilesCommand extends Command<
  ListFilesCommandInput,
  ListFilesResponse,
  ListFilesCommandBody,
  ListFilesCommandQuery
> {
  public override method = 'get' as const;

  constructor(input: ListFilesCommandInput) {
    const { purpose } = input;
    super(`/files`, undefined, { purpose });
  }
}

/**
 * CreateFileCommand
 *
 * @summary Upload a file that can be used across various endpoints. Individual files
 * can be up to 512 MB, and the size of all files uploaded by one organization
 * can be up to 100 GB.
 *
 * The Assistants API supports files up to 2 million tokens and of specific
 * file types. See the [Assistants Tools guide](/docs/assistants/tools) for
 * details.
 *
 * The Fine-tuning API only supports `.jsonl` files. The input also has
 * certain required formats for fine-tuning
 * [chat](/docs/api-reference/fine-tuning/chat-input) or
 * [completions](/docs/api-reference/fine-tuning/completions-input) models.
 *
 * The Batch API only supports `.jsonl` files up to 100 MB in size. The input
 * also has a specific required
 * [format](/docs/api-reference/batch/request-input).
 *
 * Please [contact us](https://help.openai.com/) if you need to increase these
 * storage limits.
 */
export class CreateFileCommand extends Command<
  CreateFileCommandInput,
  OpenAiFile,
  CreateFileCommandBody
> {
  public override method = 'post' as const;

  constructor(input: CreateFileCommandInput) {
    const body = input;
    super(`/files`);
  }
}

/**
 * DeleteFileCommand
 *
 * @summary Delete a file.
 */
export class DeleteFileCommand extends Command<
  DeleteFileCommandInput,
  DeleteFileResponse,
  DeleteFileCommandBody
> {
  public override method = 'delete' as const;

  constructor(input: DeleteFileCommandInput) {
    const { file_id } = input;
    super(`/files/${file_id}`);
  }
}

/**
 * RetrieveFileCommand
 *
 * @summary Returns information about a specific file.
 */
export class RetrieveFileCommand extends Command<
  RetrieveFileCommandInput,
  OpenAiFile,
  RetrieveFileCommandBody
> {
  public override method = 'get' as const;

  constructor(input: RetrieveFileCommandInput) {
    const { file_id } = input;
    super(`/files/${file_id}`);
  }
}

/**
 * DownloadFileCommand
 *
 * @summary Returns the contents of the specified file.
 */
export class DownloadFileCommand extends Command<
  DownloadFileCommandInput,
  unknown,
  DownloadFileCommandBody
> {
  public override method = 'get' as const;

  constructor(input: DownloadFileCommandInput) {
    const { file_id } = input;
    super(`/files/${file_id}/content`);
  }
}

/**
 * CreateUploadCommand
 *
 * @summary Creates an intermediate [Upload](/docs/api-reference/uploads/object) object
 * that you can add [Parts](/docs/api-reference/uploads/part-object) to.
 * Currently, an Upload can accept at most 8 GB in total and expires after an
 * hour after you create it.
 *
 * Once you complete the Upload, we will create a
 * [File](/docs/api-reference/files/object) object that contains all the parts
 * you uploaded. This File is usable in the rest of our platform as a regular
 * File object.
 *
 * For certain `purpose`s, the correct `mime_type` must be specified. Please
 * refer to documentation for the supported MIME types for your use case:
 * - [Assistants](/docs/assistants/tools/file-search/supported-files)
 *
 * For guidance on the proper filename extensions for each purpose, please
 * follow the documentation on [creating a
 * File](/docs/api-reference/files/create).
 */
export class CreateUploadCommand extends Command<
  CreateUploadCommandInput,
  Upload,
  CreateUploadCommandBody
> {
  public override method = 'post' as const;

  constructor(input: CreateUploadCommandInput) {
    const body = input;
    super(`/uploads`, body);
  }
}

/**
 * AddUploadPartCommand
 *
 * @summary Adds a [Part](/docs/api-reference/uploads/part-object) to an
 * [Upload](/docs/api-reference/uploads/object) object. A Part represents a
 * chunk of bytes from the file you are trying to upload.
 *
 * Each Part can be at most 64 MB, and you can add Parts until you hit the
 * Upload maximum of 8 GB.
 *
 * It is possible to add multiple Parts in parallel. You can decide the
 * intended order of the Parts when you [complete the
 * Upload](/docs/api-reference/uploads/complete).
 */
export class AddUploadPartCommand extends Command<
  AddUploadPartCommandInput,
  UploadPart,
  AddUploadPartCommandBody
> {
  public override method = 'post' as const;

  constructor(input: AddUploadPartCommandInput) {
    const { upload_id } = input;
    super(`/uploads/${upload_id}/parts`);
  }
}

/**
 * CompleteUploadCommand
 *
 * @summary Completes the [Upload](/docs/api-reference/uploads/object).
 *
 * Within the returned Upload object, there is a nested
 * [File](/docs/api-reference/files/object) object that is ready to use in the
 * rest of the platform.
 *
 * You can specify the order of the Parts by passing in an ordered list of the
 * Part IDs.
 *
 * The number of bytes uploaded upon completion must match the number of bytes
 * initially specified when creating the Upload object. No Parts may be added
 * after an Upload is completed.
 */
export class CompleteUploadCommand extends Command<
  CompleteUploadCommandInput,
  Upload,
  CompleteUploadCommandBody
> {
  public override method = 'post' as const;

  constructor(input: CompleteUploadCommandInput) {
    const { upload_id, ...body } = input;
    super(`/uploads/${upload_id}/complete`, body);
  }
}

/**
 * CancelUploadCommand
 *
 * @summary Cancels the Upload. No Parts may be added after an Upload is cancelled.
 */
export class CancelUploadCommand extends Command<
  CancelUploadCommandInput,
  Upload,
  CancelUploadCommandBody
> {
  public override method = 'post' as const;

  constructor(input: CancelUploadCommandInput) {
    const { upload_id } = input;
    super(`/uploads/${upload_id}/cancel`);
  }
}

/**
 * CreateFineTuningJobCommand
 *
 * @summary Creates a fine-tuning job which begins the process of creating a new model
 * from a given dataset.
 *
 * Response includes details of the enqueued job including job status and the
 * name of the fine-tuned models once complete.
 *
 * [Learn more about fine-tuning](/docs/guides/fine-tuning)
 */
export class CreateFineTuningJobCommand extends Command<
  CreateFineTuningJobCommandInput,
  FineTuningJob,
  CreateFineTuningJobCommandBody
> {
  public override method = 'post' as const;

  constructor(input: CreateFineTuningJobCommandInput) {
    const body = input;
    super(`/fine_tuning/jobs`, body);
  }
}

/**
 * ListPaginatedFineTuningJobsCommand
 *
 * @summary List your organization's fine-tuning jobs
 */
export class ListPaginatedFineTuningJobsCommand extends Command<
  ListPaginatedFineTuningJobsCommandInput,
  ListPaginatedFineTuningJobsResponse,
  ListPaginatedFineTuningJobsCommandBody,
  ListPaginatedFineTuningJobsCommandQuery
> {
  public override method = 'get' as const;

  constructor(input: ListPaginatedFineTuningJobsCommandInput) {
    const { after, limit } = input;
    super(`/fine_tuning/jobs`, undefined, { after, limit });
  }
}

/**
 * RetrieveFineTuningJobCommand
 *
 * @summary Get info about a fine-tuning job.
 *
 * [Learn more about fine-tuning](/docs/guides/fine-tuning)
 */
export class RetrieveFineTuningJobCommand extends Command<
  RetrieveFineTuningJobCommandInput,
  FineTuningJob,
  RetrieveFineTuningJobCommandBody
> {
  public override method = 'get' as const;

  constructor(input: RetrieveFineTuningJobCommandInput) {
    const { fine_tuning_job_id } = input;
    super(`/fine_tuning/jobs/${fine_tuning_job_id}`);
  }
}

/**
 * ListFineTuningEventsCommand
 *
 * @summary Get status updates for a fine-tuning job.
 */
export class ListFineTuningEventsCommand extends Command<
  ListFineTuningEventsCommandInput,
  ListFineTuningJobEventsResponse,
  ListFineTuningEventsCommandBody,
  ListFineTuningEventsCommandQuery
> {
  public override method = 'get' as const;

  constructor(input: ListFineTuningEventsCommandInput) {
    const { fine_tuning_job_id, after, limit } = input;
    super(`/fine_tuning/jobs/${fine_tuning_job_id}/events`, undefined, {
      after,
      limit,
    });
  }
}

/**
 * CancelFineTuningJobCommand
 *
 * @summary Immediately cancel a fine-tune job.
 */
export class CancelFineTuningJobCommand extends Command<
  CancelFineTuningJobCommandInput,
  FineTuningJob,
  CancelFineTuningJobCommandBody
> {
  public override method = 'post' as const;

  constructor(input: CancelFineTuningJobCommandInput) {
    const { fine_tuning_job_id } = input;
    super(`/fine_tuning/jobs/${fine_tuning_job_id}/cancel`);
  }
}

/**
 * ListFineTuningJobCheckpointsCommand
 *
 * @summary List checkpoints for a fine-tuning job.
 */
export class ListFineTuningJobCheckpointsCommand extends Command<
  ListFineTuningJobCheckpointsCommandInput,
  ListFineTuningJobCheckpointsResponse,
  ListFineTuningJobCheckpointsCommandBody,
  ListFineTuningJobCheckpointsCommandQuery
> {
  public override method = 'get' as const;

  constructor(input: ListFineTuningJobCheckpointsCommandInput) {
    const { fine_tuning_job_id, after, limit } = input;
    super(`/fine_tuning/jobs/${fine_tuning_job_id}/checkpoints`, undefined, {
      after,
      limit,
    });
  }
}

/**
 * ListModelsCommand
 *
 * @summary Lists the currently available models, and provides basic information about
 * each one such as the owner and availability.
 */
export class ListModelsCommand extends Command<
  ListModelsCommandInput,
  ListModelsResponse,
  ListModelsCommandBody
> {
  public override method = 'get' as const;

  constructor(input: ListModelsCommandInput) {
    const body = input;
    super(`/models`);
  }
}

/**
 * RetrieveModelCommand
 *
 * @summary Retrieves a model instance, providing basic information about the model
 * such as the owner and permissioning.
 */
export class RetrieveModelCommand extends Command<
  RetrieveModelCommandInput,
  Model,
  RetrieveModelCommandBody
> {
  public override method = 'get' as const;

  constructor(input: RetrieveModelCommandInput) {
    const { model } = input;
    super(`/models/${model}`);
  }
}

/**
 * DeleteModelCommand
 *
 * @summary Delete a fine-tuned model. You must have the Owner role in your
 * organization to delete a model.
 */
export class DeleteModelCommand extends Command<
  DeleteModelCommandInput,
  DeleteModelResponse,
  DeleteModelCommandBody
> {
  public override method = 'delete' as const;

  constructor(input: DeleteModelCommandInput) {
    const { model } = input;
    super(`/models/${model}`);
  }
}

/**
 * CreateModerationCommand
 *
 * @summary Classifies if text and/or image inputs are potentially harmful. Learn
 * more in the [moderation guide](/docs/guides/moderation).
 */
export class CreateModerationCommand extends Command<
  CreateModerationCommandInput,
  CreateModerationResponse,
  CreateModerationCommandBody
> {
  public override method = 'post' as const;

  constructor(input: CreateModerationCommandInput) {
    const body = input;
    super(`/moderations`, body);
  }
}

/**
 * ListAssistantsCommand
 *
 * @summary Returns a list of assistants.
 */
export class ListAssistantsCommand extends Command<
  ListAssistantsCommandInput,
  ListAssistantsResponse,
  ListAssistantsCommandBody,
  ListAssistantsCommandQuery
> {
  public override method = 'get' as const;

  constructor(input: ListAssistantsCommandInput) {
    const { limit, order, after, before } = input;
    super(`/assistants`, undefined, { limit, order, after, before });
  }
}

/**
 * CreateAssistantCommand
 *
 * @summary Create an assistant with a model and instructions.
 */
export class CreateAssistantCommand extends Command<
  CreateAssistantCommandInput,
  AssistantObject,
  CreateAssistantCommandBody
> {
  public override method = 'post' as const;

  constructor(input: CreateAssistantCommandInput) {
    const body = input;
    super(`/assistants`, body);
  }
}

/**
 * GetAssistantCommand
 *
 * @summary Retrieves an assistant.
 */
export class GetAssistantCommand extends Command<
  GetAssistantCommandInput,
  AssistantObject,
  GetAssistantCommandBody
> {
  public override method = 'get' as const;

  constructor(input: GetAssistantCommandInput) {
    const { assistant_id } = input;
    super(`/assistants/${assistant_id}`);
  }
}

/**
 * ModifyAssistantCommand
 *
 * @summary Modifies an assistant.
 */
export class ModifyAssistantCommand extends Command<
  ModifyAssistantCommandInput,
  AssistantObject,
  ModifyAssistantCommandBody
> {
  public override method = 'post' as const;

  constructor(input: ModifyAssistantCommandInput) {
    const { assistant_id, ...body } = input;
    super(`/assistants/${assistant_id}`, body);
  }
}

/**
 * DeleteAssistantCommand
 *
 * @summary Delete an assistant.
 */
export class DeleteAssistantCommand extends Command<
  DeleteAssistantCommandInput,
  DeleteAssistantResponse,
  DeleteAssistantCommandBody
> {
  public override method = 'delete' as const;

  constructor(input: DeleteAssistantCommandInput) {
    const { assistant_id } = input;
    super(`/assistants/${assistant_id}`);
  }
}

/**
 * CreateThreadCommand
 *
 * @summary Create a thread.
 */
export class CreateThreadCommand extends Command<
  CreateThreadCommandInput,
  ThreadObject,
  CreateThreadCommandBody
> {
  public override method = 'post' as const;

  constructor(input: CreateThreadCommandInput) {
    const body = input;
    super(`/threads`, body);
  }
}

/**
 * GetThreadCommand
 *
 * @summary Retrieves a thread.
 */
export class GetThreadCommand extends Command<
  GetThreadCommandInput,
  ThreadObject,
  GetThreadCommandBody
> {
  public override method = 'get' as const;

  constructor(input: GetThreadCommandInput) {
    const { thread_id } = input;
    super(`/threads/${thread_id}`);
  }
}

/**
 * ModifyThreadCommand
 *
 * @summary Modifies a thread.
 */
export class ModifyThreadCommand extends Command<
  ModifyThreadCommandInput,
  ThreadObject,
  ModifyThreadCommandBody
> {
  public override method = 'post' as const;

  constructor(input: ModifyThreadCommandInput) {
    const { thread_id, ...body } = input;
    super(`/threads/${thread_id}`, body);
  }
}

/**
 * DeleteThreadCommand
 *
 * @summary Delete a thread.
 */
export class DeleteThreadCommand extends Command<
  DeleteThreadCommandInput,
  DeleteThreadResponse,
  DeleteThreadCommandBody
> {
  public override method = 'delete' as const;

  constructor(input: DeleteThreadCommandInput) {
    const { thread_id } = input;
    super(`/threads/${thread_id}`);
  }
}

/**
 * ListMessagesCommand
 *
 * @summary Returns a list of messages for a given thread.
 */
export class ListMessagesCommand extends Command<
  ListMessagesCommandInput,
  ListMessagesResponse,
  ListMessagesCommandBody,
  ListMessagesCommandQuery
> {
  public override method = 'get' as const;

  constructor(input: ListMessagesCommandInput) {
    const { thread_id, limit, order, after, before, run_id } = input;
    super(`/threads/${thread_id}/messages`, undefined, {
      limit,
      order,
      after,
      before,
      run_id,
    });
  }
}

/**
 * CreateMessageCommand
 *
 * @summary Create a message.
 */
export class CreateMessageCommand extends Command<
  CreateMessageCommandInput,
  MessageObject,
  CreateMessageCommandBody
> {
  public override method = 'post' as const;

  constructor(input: CreateMessageCommandInput) {
    const { thread_id, ...body } = input;
    super(`/threads/${thread_id}/messages`, body);
  }
}

/**
 * GetMessageCommand
 *
 * @summary Retrieve a message.
 */
export class GetMessageCommand extends Command<
  GetMessageCommandInput,
  MessageObject,
  GetMessageCommandBody
> {
  public override method = 'get' as const;

  constructor(input: GetMessageCommandInput) {
    const { thread_id, message_id } = input;
    super(`/threads/${thread_id}/messages/${message_id}`);
  }
}

/**
 * ModifyMessageCommand
 *
 * @summary Modifies a message.
 */
export class ModifyMessageCommand extends Command<
  ModifyMessageCommandInput,
  MessageObject,
  ModifyMessageCommandBody
> {
  public override method = 'post' as const;

  constructor(input: ModifyMessageCommandInput) {
    const { thread_id, message_id, ...body } = input;
    super(`/threads/${thread_id}/messages/${message_id}`, body);
  }
}

/**
 * DeleteMessageCommand
 *
 * @summary Deletes a message.
 */
export class DeleteMessageCommand extends Command<
  DeleteMessageCommandInput,
  DeleteMessageResponse,
  DeleteMessageCommandBody
> {
  public override method = 'delete' as const;

  constructor(input: DeleteMessageCommandInput) {
    const { thread_id, message_id } = input;
    super(`/threads/${thread_id}/messages/${message_id}`);
  }
}

/**
 * CreateThreadAndRunCommand
 *
 * @summary Create a thread and run it in one request.
 */
export class CreateThreadAndRunCommand extends Command<
  CreateThreadAndRunCommandInput,
  RunObject,
  CreateThreadAndRunCommandBody
> {
  public override method = 'post' as const;

  constructor(input: CreateThreadAndRunCommandInput) {
    const body = input;
    super(`/threads/runs`, body);
  }
}

/**
 * ListRunsCommand
 *
 * @summary Returns a list of runs belonging to a thread.
 */
export class ListRunsCommand extends Command<
  ListRunsCommandInput,
  ListRunsResponse,
  ListRunsCommandBody,
  ListRunsCommandQuery
> {
  public override method = 'get' as const;

  constructor(input: ListRunsCommandInput) {
    const { thread_id, limit, order, after, before } = input;
    super(`/threads/${thread_id}/runs`, undefined, {
      limit,
      order,
      after,
      before,
    });
  }
}

/**
 * CreateRunCommand
 *
 * @summary Create a run.
 */
export class CreateRunCommand extends Command<
  CreateRunCommandInput,
  RunObject,
  CreateRunCommandBody,
  CreateRunCommandQuery
> {
  public override method = 'post' as const;

  constructor(input: CreateRunCommandInput) {
    const { thread_id, include, ...body } = input;
    super(`/threads/${thread_id}/runs`, body, { include });
  }
}

/**
 * GetRunCommand
 *
 * @summary Retrieves a run.
 */
export class GetRunCommand extends Command<
  GetRunCommandInput,
  RunObject,
  GetRunCommandBody
> {
  public override method = 'get' as const;

  constructor(input: GetRunCommandInput) {
    const { thread_id, run_id } = input;
    super(`/threads/${thread_id}/runs/${run_id}`);
  }
}

/**
 * ModifyRunCommand
 *
 * @summary Modifies a run.
 */
export class ModifyRunCommand extends Command<
  ModifyRunCommandInput,
  RunObject,
  ModifyRunCommandBody
> {
  public override method = 'post' as const;

  constructor(input: ModifyRunCommandInput) {
    const { thread_id, run_id, ...body } = input;
    super(`/threads/${thread_id}/runs/${run_id}`, body);
  }
}

/**
 * SubmitToolOuputsToRunCommand
 *
 * @summary When a run has the `status: "requires_action"` and `required_action.type`
 * is `submit_tool_outputs`, this endpoint can be used to submit the outputs
 * from the tool calls once they're all completed. All outputs must be
 * submitted in a single request.
 */
export class SubmitToolOuputsToRunCommand extends Command<
  SubmitToolOuputsToRunCommandInput,
  RunObject,
  SubmitToolOuputsToRunCommandBody
> {
  public override method = 'post' as const;

  constructor(input: SubmitToolOuputsToRunCommandInput) {
    const { thread_id, run_id, ...body } = input;
    super(`/threads/${thread_id}/runs/${run_id}/submit_tool_outputs`, body);
  }
}

/**
 * CancelRunCommand
 *
 * @summary Cancels a run that is `in_progress`.
 */
export class CancelRunCommand extends Command<
  CancelRunCommandInput,
  RunObject,
  CancelRunCommandBody
> {
  public override method = 'post' as const;

  constructor(input: CancelRunCommandInput) {
    const { thread_id, run_id } = input;
    super(`/threads/${thread_id}/runs/${run_id}/cancel`);
  }
}

/**
 * ListRunStepsCommand
 *
 * @summary Returns a list of run steps belonging to a run.
 */
export class ListRunStepsCommand extends Command<
  ListRunStepsCommandInput,
  ListRunStepsResponse,
  ListRunStepsCommandBody,
  ListRunStepsCommandQuery
> {
  public override method = 'get' as const;

  constructor(input: ListRunStepsCommandInput) {
    const { thread_id, run_id, limit, order, after, before, include } = input;
    super(`/threads/${thread_id}/runs/${run_id}/steps`, undefined, {
      limit,
      order,
      after,
      before,
      include,
    });
  }
}

/**
 * GetRunStepCommand
 *
 * @summary Retrieves a run step.
 */
export class GetRunStepCommand extends Command<
  GetRunStepCommandInput,
  RunStepObject,
  GetRunStepCommandBody,
  GetRunStepCommandQuery
> {
  public override method = 'get' as const;

  constructor(input: GetRunStepCommandInput) {
    const { thread_id, run_id, step_id, include } = input;
    super(`/threads/${thread_id}/runs/${run_id}/steps/${step_id}`, undefined, {
      include,
    });
  }
}

/**
 * ListVectorStoresCommand
 *
 * @summary Returns a list of vector stores.
 */
export class ListVectorStoresCommand extends Command<
  ListVectorStoresCommandInput,
  ListVectorStoresResponse,
  ListVectorStoresCommandBody,
  ListVectorStoresCommandQuery
> {
  public override method = 'get' as const;

  constructor(input: ListVectorStoresCommandInput) {
    const { limit, order, after, before } = input;
    super(`/vector_stores`, undefined, { limit, order, after, before });
  }
}

/**
 * CreateVectorStoreCommand
 *
 * @summary Create a vector store.
 */
export class CreateVectorStoreCommand extends Command<
  CreateVectorStoreCommandInput,
  VectorStoreObject,
  CreateVectorStoreCommandBody
> {
  public override method = 'post' as const;

  constructor(input: CreateVectorStoreCommandInput) {
    const body = input;
    super(`/vector_stores`, body);
  }
}

/**
 * GetVectorStoreCommand
 *
 * @summary Retrieves a vector store.
 */
export class GetVectorStoreCommand extends Command<
  GetVectorStoreCommandInput,
  VectorStoreObject,
  GetVectorStoreCommandBody
> {
  public override method = 'get' as const;

  constructor(input: GetVectorStoreCommandInput) {
    const { vector_store_id } = input;
    super(`/vector_stores/${vector_store_id}`);
  }
}

/**
 * ModifyVectorStoreCommand
 *
 * @summary Modifies a vector store.
 */
export class ModifyVectorStoreCommand extends Command<
  ModifyVectorStoreCommandInput,
  VectorStoreObject,
  ModifyVectorStoreCommandBody
> {
  public override method = 'post' as const;

  constructor(input: ModifyVectorStoreCommandInput) {
    const { vector_store_id, ...body } = input;
    super(`/vector_stores/${vector_store_id}`, body);
  }
}

/**
 * DeleteVectorStoreCommand
 *
 * @summary Delete a vector store.
 */
export class DeleteVectorStoreCommand extends Command<
  DeleteVectorStoreCommandInput,
  DeleteVectorStoreResponse,
  DeleteVectorStoreCommandBody
> {
  public override method = 'delete' as const;

  constructor(input: DeleteVectorStoreCommandInput) {
    const { vector_store_id } = input;
    super(`/vector_stores/${vector_store_id}`);
  }
}

/**
 * ListVectorStoreFilesCommand
 *
 * @summary Returns a list of vector store files.
 */
export class ListVectorStoreFilesCommand extends Command<
  ListVectorStoreFilesCommandInput,
  ListVectorStoreFilesResponse,
  ListVectorStoreFilesCommandBody,
  ListVectorStoreFilesCommandQuery
> {
  public override method = 'get' as const;

  constructor(input: ListVectorStoreFilesCommandInput) {
    const { vector_store_id, limit, order, after, before, filter } = input;
    super(`/vector_stores/${vector_store_id}/files`, undefined, {
      limit,
      order,
      after,
      before,
      filter,
    });
  }
}

/**
 * CreateVectorStoreFileCommand
 *
 * @summary Create a vector store file by attaching a [File](/docs/api-reference/files)
 * to a [vector store](/docs/api-reference/vector-stores/object).
 */
export class CreateVectorStoreFileCommand extends Command<
  CreateVectorStoreFileCommandInput,
  VectorStoreFileObject,
  CreateVectorStoreFileCommandBody
> {
  public override method = 'post' as const;

  constructor(input: CreateVectorStoreFileCommandInput) {
    const { vector_store_id, ...body } = input;
    super(`/vector_stores/${vector_store_id}/files`, body);
  }
}

/**
 * GetVectorStoreFileCommand
 *
 * @summary Retrieves a vector store file.
 */
export class GetVectorStoreFileCommand extends Command<
  GetVectorStoreFileCommandInput,
  VectorStoreFileObject,
  GetVectorStoreFileCommandBody
> {
  public override method = 'get' as const;

  constructor(input: GetVectorStoreFileCommandInput) {
    const { vector_store_id, file_id } = input;
    super(`/vector_stores/${vector_store_id}/files/${file_id}`);
  }
}

/**
 * DeleteVectorStoreFileCommand
 *
 * @summary Delete a vector store file. This will remove the file from the vector store
 * but the file itself will not be deleted. To delete the file, use the
 * [delete file](/docs/api-reference/files/delete) endpoint.
 */
export class DeleteVectorStoreFileCommand extends Command<
  DeleteVectorStoreFileCommandInput,
  DeleteVectorStoreFileResponse,
  DeleteVectorStoreFileCommandBody
> {
  public override method = 'delete' as const;

  constructor(input: DeleteVectorStoreFileCommandInput) {
    const { vector_store_id, file_id } = input;
    super(`/vector_stores/${vector_store_id}/files/${file_id}`);
  }
}

/**
 * CreateVectorStoreFileBatchCommand
 *
 * @summary Create a vector store file batch.
 */
export class CreateVectorStoreFileBatchCommand extends Command<
  CreateVectorStoreFileBatchCommandInput,
  VectorStoreFileBatchObject,
  CreateVectorStoreFileBatchCommandBody
> {
  public override method = 'post' as const;

  constructor(input: CreateVectorStoreFileBatchCommandInput) {
    const { vector_store_id, ...body } = input;
    super(`/vector_stores/${vector_store_id}/file_batches`, body);
  }
}

/**
 * GetVectorStoreFileBatchCommand
 *
 * @summary Retrieves a vector store file batch.
 */
export class GetVectorStoreFileBatchCommand extends Command<
  GetVectorStoreFileBatchCommandInput,
  VectorStoreFileBatchObject,
  GetVectorStoreFileBatchCommandBody
> {
  public override method = 'get' as const;

  constructor(input: GetVectorStoreFileBatchCommandInput) {
    const { vector_store_id, batch_id } = input;
    super(`/vector_stores/${vector_store_id}/file_batches/${batch_id}`);
  }
}

/**
 * CancelVectorStoreFileBatchCommand
 *
 * @summary Cancel a vector store file batch. This attempts to cancel the processing of
 * files in this batch as soon as possible.
 */
export class CancelVectorStoreFileBatchCommand extends Command<
  CancelVectorStoreFileBatchCommandInput,
  VectorStoreFileBatchObject,
  CancelVectorStoreFileBatchCommandBody
> {
  public override method = 'post' as const;

  constructor(input: CancelVectorStoreFileBatchCommandInput) {
    const { vector_store_id, batch_id } = input;
    super(`/vector_stores/${vector_store_id}/file_batches/${batch_id}/cancel`);
  }
}

/**
 * ListFilesInVectorStoreBatchCommand
 *
 * @summary Returns a list of vector store files in a batch.
 */
export class ListFilesInVectorStoreBatchCommand extends Command<
  ListFilesInVectorStoreBatchCommandInput,
  ListVectorStoreFilesResponse,
  ListFilesInVectorStoreBatchCommandBody,
  ListFilesInVectorStoreBatchCommandQuery
> {
  public override method = 'get' as const;

  constructor(input: ListFilesInVectorStoreBatchCommandInput) {
    const { vector_store_id, batch_id, limit, order, after, before, filter } =
      input;
    super(
      `/vector_stores/${vector_store_id}/file_batches/${batch_id}/files`,
      undefined,
      { limit, order, after, before, filter },
    );
  }
}

/**
 * CreateBatchCommand
 *
 * @summary Creates and executes a batch from an uploaded file of requests
 */
export class CreateBatchCommand extends Command<
  CreateBatchCommandInput,
  Batch,
  CreateBatchCommandBody
> {
  public override method = 'post' as const;

  constructor(input: CreateBatchCommandInput) {
    const body = input;
    super(`/batches`);
  }
}

/**
 * ListBatchesCommand
 *
 * @summary List your organization's batches.
 */
export class ListBatchesCommand extends Command<
  ListBatchesCommandInput,
  ListBatchesResponse,
  ListBatchesCommandBody,
  ListBatchesCommandQuery
> {
  public override method = 'get' as const;

  constructor(input: ListBatchesCommandInput) {
    const { after, limit } = input;
    super(`/batches`, undefined, { after, limit });
  }
}

/**
 * RetrieveBatchCommand
 *
 * @summary Retrieves a batch.
 */
export class RetrieveBatchCommand extends Command<
  RetrieveBatchCommandInput,
  Batch,
  RetrieveBatchCommandBody
> {
  public override method = 'get' as const;

  constructor(input: RetrieveBatchCommandInput) {
    const { batch_id } = input;
    super(`/batches/${batch_id}`);
  }
}

/**
 * CancelBatchCommand
 *
 * @summary Cancels an in-progress batch. The batch will be in status `cancelling` for
 * up to 10 minutes, before changing to `cancelled`, where it will have
 * partial results (if any) available in the output file.
 */
export class CancelBatchCommand extends Command<
  CancelBatchCommandInput,
  Batch,
  CancelBatchCommandBody
> {
  public override method = 'post' as const;

  constructor(input: CancelBatchCommandInput) {
    const { batch_id } = input;
    super(`/batches/${batch_id}/cancel`);
  }
}

/**
 * ListAuditLogsCommand
 *
 * @summary List user actions and configuration changes within this organization.
 */
export class ListAuditLogsCommand extends Command<
  ListAuditLogsCommandInput,
  ListAuditLogsResponse,
  ListAuditLogsCommandBody,
  ListAuditLogsCommandQuery
> {
  public override method = 'get' as const;

  constructor(input: ListAuditLogsCommandInput) {
    const {
      effective_at,
      project_ids,
      event_types,
      actor_ids,
      actor_emails,
      resource_ids,
      limit,
      after,
      before,
    } = input;
    super(`/organization/audit_logs`, undefined, {
      effective_at,
      project_ids,
      event_types,
      actor_ids,
      actor_emails,
      resource_ids,
      limit,
      after,
      before,
    });
  }
}

/**
 * ListInvitesCommand
 *
 * @summary Returns a list of invites in the organization.
 */
export class ListInvitesCommand extends Command<
  ListInvitesCommandInput,
  InviteListResponse,
  ListInvitesCommandBody,
  ListInvitesCommandQuery
> {
  public override method = 'get' as const;

  constructor(input: ListInvitesCommandInput) {
    const { limit, after } = input;
    super(`/organization/invites`, undefined, { limit, after });
  }
}

/**
 * InviteUserCommand
 *
 * @summary Create an invite for a user to the organization. The invite must be
 * accepted by the user before they have access to the organization.
 */
export class InviteUserCommand extends Command<
  InviteUserCommandInput,
  Invite,
  InviteUserCommandBody
> {
  public override method = 'post' as const;

  constructor(input: InviteUserCommandInput) {
    const body = input;
    super(`/organization/invites`, body);
  }
}

/**
 * RetrieveInviteCommand
 *
 * @summary Retrieves an invite.
 */
export class RetrieveInviteCommand extends Command<
  RetrieveInviteCommandInput,
  Invite,
  RetrieveInviteCommandBody
> {
  public override method = 'get' as const;

  constructor(input: RetrieveInviteCommandInput) {
    const { invite_id } = input;
    super(`/organization/invites/${invite_id}`);
  }
}

/**
 * DeleteInviteCommand
 *
 * @summary Delete an invite. If the invite has already been accepted, it cannot be
 * deleted.
 */
export class DeleteInviteCommand extends Command<
  DeleteInviteCommandInput,
  InviteDeleteResponse,
  DeleteInviteCommandBody
> {
  public override method = 'delete' as const;

  constructor(input: DeleteInviteCommandInput) {
    const { invite_id } = input;
    super(`/organization/invites/${invite_id}`);
  }
}

/**
 * ListUsersCommand
 *
 * @summary Lists all of the users in the organization.
 */
export class ListUsersCommand extends Command<
  ListUsersCommandInput,
  UserListResponse,
  ListUsersCommandBody,
  ListUsersCommandQuery
> {
  public override method = 'get' as const;

  constructor(input: ListUsersCommandInput) {
    const { limit, after } = input;
    super(`/organization/users`, undefined, { limit, after });
  }
}

/**
 * RetrieveUserCommand
 *
 * @summary Retrieves a user by their identifier.
 */
export class RetrieveUserCommand extends Command<
  RetrieveUserCommandInput,
  User,
  RetrieveUserCommandBody
> {
  public override method = 'get' as const;

  constructor(input: RetrieveUserCommandInput) {
    const { user_id } = input;
    super(`/organization/users/${user_id}`);
  }
}

/**
 * ModifyUserCommand
 *
 * @summary Modifies a user's role in the organization.
 */
export class ModifyUserCommand extends Command<
  ModifyUserCommandInput,
  User,
  ModifyUserCommandBody
> {
  public override method = 'post' as const;

  constructor(input: ModifyUserCommandInput) {
    const body = input;
    super(`/organization/users/${user_id}`, body);
  }
}

/**
 * DeleteUserCommand
 *
 * @summary Deletes a user from the organization.
 */
export class DeleteUserCommand extends Command<
  DeleteUserCommandInput,
  UserDeleteResponse,
  DeleteUserCommandBody
> {
  public override method = 'delete' as const;

  constructor(input: DeleteUserCommandInput) {
    const { user_id } = input;
    super(`/organization/users/${user_id}`);
  }
}

/**
 * ListProjectsCommand
 *
 * @summary Returns a list of projects.
 */
export class ListProjectsCommand extends Command<
  ListProjectsCommandInput,
  ProjectListResponse,
  ListProjectsCommandBody,
  ListProjectsCommandQuery
> {
  public override method = 'get' as const;

  constructor(input: ListProjectsCommandInput) {
    const { limit, after, include_archived } = input;
    super(`/organization/projects`, undefined, {
      limit,
      after,
      include_archived,
    });
  }
}

/**
 * CreateProjectCommand
 *
 * @summary Create a new project in the organization. Projects can be created and
 * archived, but cannot be deleted.
 */
export class CreateProjectCommand extends Command<
  CreateProjectCommandInput,
  Project,
  CreateProjectCommandBody
> {
  public override method = 'post' as const;

  constructor(input: CreateProjectCommandInput) {
    const body = input;
    super(`/organization/projects`, body);
  }
}

/**
 * RetrieveProjectCommand
 *
 * @summary Retrieves a project.
 */
export class RetrieveProjectCommand extends Command<
  RetrieveProjectCommandInput,
  Project,
  RetrieveProjectCommandBody
> {
  public override method = 'get' as const;

  constructor(input: RetrieveProjectCommandInput) {
    const { project_id } = input;
    super(`/organization/projects/${project_id}`);
  }
}

/**
 * ModifyProjectCommand
 *
 * @summary Modifies a project in the organization.
 */
export class ModifyProjectCommand extends Command<
  ModifyProjectCommandInput,
  Project,
  ModifyProjectCommandBody
> {
  public override method = 'post' as const;

  constructor(input: ModifyProjectCommandInput) {
    const body = input;
    super(`/organization/projects/${project_id}`, body);
  }
}

/**
 * ArchiveProjectCommand
 *
 * @summary Archives a project in the organization. Archived projects cannot be used or
 * updated.
 */
export class ArchiveProjectCommand extends Command<
  ArchiveProjectCommandInput,
  Project,
  ArchiveProjectCommandBody
> {
  public override method = 'post' as const;

  constructor(input: ArchiveProjectCommandInput) {
    const { project_id } = input;
    super(`/organization/projects/${project_id}/archive`);
  }
}

/**
 * ListProjectUsersCommand
 *
 * @summary Returns a list of users in the project.
 */
export class ListProjectUsersCommand extends Command<
  ListProjectUsersCommandInput,
  ProjectUserListResponse,
  ListProjectUsersCommandBody,
  ListProjectUsersCommandQuery
> {
  public override method = 'get' as const;

  constructor(input: ListProjectUsersCommandInput) {
    const { project_id, limit, after } = input;
    super(`/organization/projects/${project_id}/users`, undefined, {
      limit,
      after,
    });
  }
}

/**
 * CreateProjectUserCommand
 *
 * @summary Adds a user to the project. Users must already be members of the
 * organization to be added to a project.
 */
export class CreateProjectUserCommand extends Command<
  CreateProjectUserCommandInput,
  ProjectUser,
  CreateProjectUserCommandBody
> {
  public override method = 'post' as const;

  constructor(input: CreateProjectUserCommandInput) {
    const { project_id, ...body } = input;
    super(`/organization/projects/${project_id}/users`, body);
  }
}

/**
 * RetrieveProjectUserCommand
 *
 * @summary Retrieves a user in the project.
 */
export class RetrieveProjectUserCommand extends Command<
  RetrieveProjectUserCommandInput,
  ProjectUser,
  RetrieveProjectUserCommandBody
> {
  public override method = 'get' as const;

  constructor(input: RetrieveProjectUserCommandInput) {
    const { project_id, user_id } = input;
    super(`/organization/projects/${project_id}/users/${user_id}`);
  }
}

/**
 * ModifyProjectUserCommand
 *
 * @summary Modifies a user's role in the project.
 */
export class ModifyProjectUserCommand extends Command<
  ModifyProjectUserCommandInput,
  ProjectUser,
  ModifyProjectUserCommandBody
> {
  public override method = 'post' as const;

  constructor(input: ModifyProjectUserCommandInput) {
    const body = input;
    super(`/organization/projects/${project_id}/users/${user_id}`, body);
  }
}

/**
 * DeleteProjectUserCommand
 *
 * @summary Deletes a user from the project.
 */
export class DeleteProjectUserCommand extends Command<
  DeleteProjectUserCommandInput,
  ProjectUserDeleteResponse,
  DeleteProjectUserCommandBody
> {
  public override method = 'delete' as const;

  constructor(input: DeleteProjectUserCommandInput) {
    const { project_id, user_id } = input;
    super(`/organization/projects/${project_id}/users/${user_id}`);
  }
}

/**
 * ListProjectServiceAccountsCommand
 *
 * @summary Returns a list of service accounts in the project.
 */
export class ListProjectServiceAccountsCommand extends Command<
  ListProjectServiceAccountsCommandInput,
  ProjectServiceAccountListResponse,
  ListProjectServiceAccountsCommandBody,
  ListProjectServiceAccountsCommandQuery
> {
  public override method = 'get' as const;

  constructor(input: ListProjectServiceAccountsCommandInput) {
    const { project_id, limit, after } = input;
    super(`/organization/projects/${project_id}/service_accounts`, undefined, {
      limit,
      after,
    });
  }
}

/**
 * CreateProjectServiceAccountCommand
 *
 * @summary Creates a new service account in the project. This also returns an
 * unredacted API key for the service account.
 */
export class CreateProjectServiceAccountCommand extends Command<
  CreateProjectServiceAccountCommandInput,
  ProjectServiceAccountCreateResponse,
  CreateProjectServiceAccountCommandBody
> {
  public override method = 'post' as const;

  constructor(input: CreateProjectServiceAccountCommandInput) {
    const { project_id, ...body } = input;
    super(`/organization/projects/${project_id}/service_accounts`, body);
  }
}

/**
 * RetrieveProjectServiceAccountCommand
 *
 * @summary Retrieves a service account in the project.
 */
export class RetrieveProjectServiceAccountCommand extends Command<
  RetrieveProjectServiceAccountCommandInput,
  ProjectServiceAccount,
  RetrieveProjectServiceAccountCommandBody
> {
  public override method = 'get' as const;

  constructor(input: RetrieveProjectServiceAccountCommandInput) {
    const { project_id, service_account_id } = input;
    super(
      `/organization/projects/${project_id}/service_accounts/${service_account_id}`,
    );
  }
}

/**
 * DeleteProjectServiceAccountCommand
 *
 * @summary Deletes a service account from the project.
 */
export class DeleteProjectServiceAccountCommand extends Command<
  DeleteProjectServiceAccountCommandInput,
  ProjectServiceAccountDeleteResponse,
  DeleteProjectServiceAccountCommandBody
> {
  public override method = 'delete' as const;

  constructor(input: DeleteProjectServiceAccountCommandInput) {
    const { project_id, service_account_id } = input;
    super(
      `/organization/projects/${project_id}/service_accounts/${service_account_id}`,
    );
  }
}

/**
 * ListProjectApiKeysCommand
 *
 * @summary Returns a list of API keys in the project.
 */
export class ListProjectApiKeysCommand extends Command<
  ListProjectApiKeysCommandInput,
  ProjectApiKeyListResponse,
  ListProjectApiKeysCommandBody,
  ListProjectApiKeysCommandQuery
> {
  public override method = 'get' as const;

  constructor(input: ListProjectApiKeysCommandInput) {
    const { project_id, limit, after } = input;
    super(`/organization/projects/${project_id}/api_keys`, undefined, {
      limit,
      after,
    });
  }
}

/**
 * RetrieveProjectApiKeyCommand
 *
 * @summary Retrieves an API key in the project.
 */
export class RetrieveProjectApiKeyCommand extends Command<
  RetrieveProjectApiKeyCommandInput,
  ProjectApiKey,
  RetrieveProjectApiKeyCommandBody
> {
  public override method = 'get' as const;

  constructor(input: RetrieveProjectApiKeyCommandInput) {
    const { project_id, key_id } = input;
    super(`/organization/projects/${project_id}/api_keys/${key_id}`);
  }
}

/**
 * DeleteProjectApiKeyCommand
 *
 * @summary Deletes an API key from the project.
 */
export class DeleteProjectApiKeyCommand extends Command<
  DeleteProjectApiKeyCommandInput,
  ProjectApiKeyDeleteResponse,
  DeleteProjectApiKeyCommandBody
> {
  public override method = 'delete' as const;

  constructor(input: DeleteProjectApiKeyCommandInput) {
    const { project_id, key_id } = input;
    super(`/organization/projects/${project_id}/api_keys/${key_id}`);
  }
}
